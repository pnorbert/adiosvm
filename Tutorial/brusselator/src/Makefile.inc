# Set variables here
FC=
CXX=
FFTW_DIR?=
ADIOS2_DIR?=

ADIOS2_LIB =-L${ADIOS2_DIR}/lib -ladios2_f -ladios2 -ladios2_sst -ladios2_evpath -ladios2_ffs -ladios2_dill -ladios2_atl

FFLAGS=-cpp -O3 -DADIOS2
CXXFLAGS=-O3 -std=c++11
CFLAGS=-O3

INCLUDES = -I${FFTW_DIR}/include -I${decompdir}/include -I${ADIOS2_DIR}/include/fortran
FFTW_LIB = -L${FFTW_DIR}/lib -lfftw3
DECOMPLIB = -L${decompdir}/lib -l2decomp_fft
LIBS = ${DECOMPLIB} ${ADIOS2_LIB} ${FFTW_LIB}


#====================================================
# DO NOT EDIT BEYOND THIS UNLESS ABSOLUTELY NECESSARY
#====================================================

.DEFAULT_GOAL := all
var_checks:
	@if test -z "$(FC)"; then echo "FC not set"; exit 1; fi
	@if test -z "$(CXX)"; then echo "CXX not set"; exit 1; fi
	@if test -z "$(FFTW_DIR)"; then echo "FFTW_DIR not set"; exit 1; fi
	@if test -z "$(ADIOS2_DIR)"; then echo "ADIOS2_DIR not set"; exit 1; fi

#============================
# END OF BLOCK
#============================



#================================================
# SETTINGS FOR THE 2DECOMP_FFT LIBRARY BELOW.
# YOU DO NOT NEED TO MODIFY THEM.
#================================================

decompdir=./2decomp_fft

# 2DECOMP&FFT options
#====================

# Choose pre-processing options
#   -DDOUBLE_PREC   - use double-precision (default single)
#   -DEVEN          - for evenly distributed data, use ALLTOALL
#   -DSHM	        - enable system V shared-memory implementation
#   -DOVERWRITE     - allow FFT input to be overwritten (save memory)
#   -DOCC           - use API for overlap communication and computation
#   -DGLOBAL_ARRAYS - turn on support for Global Arrays toolkit
#   -DT3PIO         - turn on LUSTRE IO optimisation code using T3PIO
OPTIONS=-DDOUBLE_PREC

# Choose one FFT engine, available options are:
#   acml       - AMD Core Math Library
#   ffte       - FFTE
#   fftpack5   - FFTPACK5
#   fftw3      - FFTW version 3.x
#   fftw3_f03  - FFTW 3.3-beta1 or later (with Fortran 2003 interface)
#   generic    - A general FFT algorithm (no 3rd-party library needed)
#   mkl        - Intel Math Kernel Library
FFT=fftw3

# Platform-dependent information - compiler, external library etc
#================================================================

# Inlcude path if necessary (change to your actual paths)
FFTW_DIR?=${FFTW_DIR}
MKL_PATH=/opt/intel/mkl
ifeq ($(FFT),mkl)
  INC=-I$(MKL_PATH)/include
  # Fortran compiler used to compile MKL mod files
  IFORT=gfortran
else ifeq ($(FFT),fftw3)
  INC=-I$(FFTW_DIR)/include
else ifeq ($(FFT),fftw3_f03)
  INC=-I$(FFTW_DIR)/include
else
  INC=
endif

ifneq (,$(findstring DGLOBAL_ARRAYS,$(OPTIONS)))
  GA_PATH=/opt/ga-5-0-2
  INC+= -I$(GA_PATH)/include
endif

ifneq (,$(findstring DT3PIO,$(OPTIONS)))
  T3PIO_PATH=/opt/t3pio
  INC+= -I$(T3PIO_PATH)/include
endif


#----------------------- Fortran Compiler ----------------------------
F90=${FC}

# enable preprocessing
CPPFLAGS=-cpp
# enable Cray pointer support if needed
CRAYPTR=-fcray-pointer
# optimisation or debugging flags
#OPTIM=-g -fcheck=all
OPTIM=-O3

F90FLAGS=$(OPTIM) $(CRAYPTR) $(CPPFLAGS) $(INC)
LDFLAGS=$(OPTIM)

#--------------------------C Compiler---------------------------------
#CC=${CC}
CFLAGS=-O3

#-----------------------External Library------------------------------

# For FFTW
LIB_FFTW3=-L$(FFTW_DIR)/lib -lfftw3f -lfftw3

# For ACML
# This assumes that 32-bit ACML installed at /opt/. Adjust properly.
# It helps to create a symbolic link such as 'acml -> acml4.4.0'
# and update the symbolic link when future ACML version is installed. 
LIB_ACML=/opt/acml/gfortran32/lib/libacml.a -lrt

# For FFTPACK5 
FFTPACK5_PATH=$(HOME)/software/fftpack5
LIB_FFTPACK5=$(FFTPACK5_PATH)/libfftpack5.a

# For Intel MKL
MKL_LIB_PATH= $(MKL_PATH)/lib/ia32
LIB_MKL=-Wl,--start-group $(MKL_LIB_PATH)/libmkl_gf.a $(MKL_LIB_PATH)/libmkl_sequential.a $(MKL_LIB_PATH)/libmkl_core.a -Wl,--end-group -lpthread

# For FFTE
FFTE_PATH=$(HOME)/software/ffte-4.1
LIB_FFTE=$(FFTE_PATH)/libffte.a

ifeq ($(FFT),generic)
     LIBFFT=
else ifeq ($(FFT),acml)
     LIBFFT=$(LIB_ACML)
else ifeq ($(FFT),ffte)
     LIBFFT=$(LIB_FFTE)
else ifeq ($(FFT),fftpack5)
     LIBFFT=$(LIB_FFTPACK5)
else ifeq ($(FFT),fftw3)
     LIBFFT=$(LIB_FFTW3)
else ifeq ($(FFT),fftw3_f03)
     LIBFFT=$(LIB_FFTW3)
else ifeq ($(FFT),mkl)
     LIBFFT=$(LIB_MKL)
endif	
